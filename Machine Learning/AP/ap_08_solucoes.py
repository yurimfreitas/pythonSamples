# -*- coding: utf-8 -*-
"""AP_08_solucoes.ipynb

Automatically generated by Colab.


# Vamos aplicar o que aprendemos sobre regressões lineares
*   Complete com o código em falta
*   Sempre que necessário, **substitua** ___

---

dataset: [fonte](https://www.kaggle.com/datasets/quantbruce/real-estate-price-prediction)

---

Corra a primeira célula de código para obter o dataframe com que vamos trabalhar
"""

# faça o upload do ficheiro csv associado à atividade

# vamos importar a biblioteca
import pandas as pd
import numpy as np

# vamos importar o dataframe do ficheiro .csv
df_real_estate = (pd
                  .read_csv("Real estate.csv")
                  .drop(["No",
                         "X1 transaction date",
                         "X4 number of convenience stores"], axis = 1))

# veja as 5 primeiras linhas do dataframe
df_real_estate.head()
# veja a forma do dataframe: quantas linhas, quantas colunas?
df_real_estate.shape
# veja a informação sobre o dataframe
df_real_estate.info()
# veja a descrição das variáveis numéricas
df_real_estate.describe()

# importe o matplotlib.pyplot
import matplotlib.pyplot as plt
plt.style.use('ggplot')
x_variable = df_real_estate["X5 latitude"]
y_variable = df_real_estate["Y house price of unit area"]
plt.scatter(x_variable, y_variable, color = 'b')
plt.ylabel("preço do m2 de habitação")
plt.xlabel('latitude')
plt.show()

# defina a variável alvo ("Y house price of unit area")
target_variable = "Y house price of unit area"

# train_test split usando a função train_test_split
X = df_real_estate.drop([target_variable], axis = 1)
y = df_real_estate[target_variable]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size = 0.3,
                                                    random_state = 12)

# escolha "X5 latitude" como variável independente
x_variable = 'X5 latitude'
X_1_feature = X_train[[x_variable]]

# importe o modelo
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X_1_feature, y_train)

# faça previsão para os pontos de teste
y_reg = lin_reg.predict(X_test[[x_variable]])

# veja os coeficientes da regressão
m = lin_reg.coef_[0]
b = lin_reg.intercept_
print("m: {}; b: {}".format(m , b))

# verifique o r2 (round -> 3)
print("r2: {}".format(lin_reg.score(X_test[[x_variable]], y_test).round(3)))

# visualize o resultado para o teste
plt.scatter(X_test[[x_variable]], y_test, color = 'k')
plt.scatter(X_test[[x_variable]], y_reg, color = 'r')
plt.ylabel("preço do m2 de habitação")
plt.xlabel('latitude')
plt.show()

# vamos codificar o nome das variáveis
columns_names = ["x1", "x2", "x3", "x4", "y"]
df_real_estate.columns = columns_names

# importe o modelo de regressão linear
from sklearn.linear_model import LinearRegression
lin_reg_all = LinearRegression()
lin_reg_all.fit(X_train, y_train)
y_pred = lin_reg_all.predict(X_test)

# verifique o r2 (round -> 3)
lin_reg_all.score(X_test, y_test).round(3)

# importe o modelo de Ridge
from sklearn.linear_model import Ridge

# considere alpha = 0.3
ridge_reg = Ridge(alpha = 0.3)
ridge_reg.fit(X_train, y_train)
y_pred_ridge = ridge_reg.predict(X_test)

# verifique o r2 (round -> 3)
ridge_reg.score(X_test, y_test).round(3)

# importe o modelo de Lasso
from sklearn.linear_model import Lasso

# considere alpha = 0.5
lasso_reg = Lasso(alpha = 0.5)
lasso_reg.fit(X_train, y_train)
y_pred_lasso = lasso_reg.predict(X_test)

# verifique o r2 (round -> 3)
lasso_reg.score(X_test, y_test).round(3)